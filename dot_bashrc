export XDG_DATA_HOME="$HOME"/.local/share
export XDG_CONFIG_HOME="$HOME"/.config
export XDG_STATE_HOME="$HOME"/.local/state
export XDG_CACHE_HOME="$HOME"/.cache
export PS1="\[$(tput bold)\]\[\033[38;5;0m\]\[\033[48;5;11m\]\u\[$(tput sgr0)\] \[$(tput sgr0)\]\[$(tput bold)\]\[\033[38;5;255m\]\W\[$(tput sgr0)\]\[\033[38;5;11m\]>\[$(tput sgr0)\] \[$(tput sgr0)\]"
export HISTFILE="$XDG_STATE_HOME"/bash/history
export HISTSIZE=500
export HISTFILESIZE=1000
export GNUPGHOME="$XDG_DATA_HOME"/gnupg
export GTK2_RC_FILES="$XDG_CONFIG_HOME"/gtk-2.0/gtkrc
export LESSHISTFILE="$XDG_CACHE_HOME"/less/history
export PYTHONSTARTUP="$XDG_CONFIG_HOME"/python/pythonrc
export XINITRC="$XDG_CONFIG_HOME"/X11/xinitrc
export CARGO_TARGET_DIR="$HOME/Programming/CargoTarget"
export GOPATH="$HOME/Programming/GoPath"

export PATH="$PATH:~/Repos/nspawn-registry/:~/.local/bin:~/.bun/bin:~/.config/composer/vendor/bin"

export EDITOR="nvim"
alias vim="nvim"
alias v="nvim"
alias vi="nvim --noplugin -u /etc/xdg/nvim/sysinit.vim"

alias cp="cp -i" # confirm before overwriting something
alias more=less
alias ls="ls --color=auto"
alias l="ls --color=auto"
alias ll="ls -lah --color=auto"
alias c="cd"
alias ip="ip --color=auto"
alias sudo="sudo " # this makes the aliases work with sudo (for some reason)
alias cachec="sudo bash -c 'sync; echo 3 > /proc/sys/vm/drop_caches'"
alias pyserv="python3 -m http.server 8080"
alias up="paru; chezmoi update; flatpak update; rustup update"
alias dots="chezmoi"
alias alpvm="sudo systemd-nspawn -q -x -D ~/Files/Containers/alpine";
alias gamingcont="sudo systemd-nspawn -q -D ~/Files/Containers/gaming -E DISPLAY=:0 -E XDG_RUNTIME_DIR=/run/user/1000 --bind=/dev/input --bind=/dev/dri --bind=/dev/shm --bind=/run/dbus/system_bus_socket --bind=/tmp/.X11-unix --bind=/dev/snd -E PULSE_SERVER=unix:/run/user/1000/pulse/native --bind=/run/user/1000 --bind=/home/dvdarch/.config/pulse/cookie:/home/gamer/.config/pulse/cookie --property=DeviceAllow='/dev/dri/renderD128' -u gamer"
alias archvm="sudo systemd-nspawn -q -x -D ~/Files/Containers/arch -E DISPLAY=:0 -E XDG_RUNTIME_DIR=/run/user/1000 --bind=/dev/input --bind=/dev/dri --bind=/dev/shm --bind=/run/dbus/system_bus_socket --bind=/tmp/.X11-unix --bind=/dev/snd -E PULSE_SERVER=unix:/run/user/1000/pulse/native --bind=/run/user/1000 --bind=/home/dvdarch/.config/pulse/cookie:/home/gamer/.config/pulse/cookie --property=DeviceAllow='/dev/dri/renderD128'"
alias hackingvm="pushd $HOME/Files/VMs && ./hackingvm.sh && popd"

screenrecord() {
    if ! pactl list sinks | grep -q 'Name: MicAndPC'; then
        echo "Creating MicAndPC sink..."
        pactl load-module module-null-sink sink_name=MicAndPC
        pactl load-module module-loopback sink=MicAndPC source=alsa_output.pci-0000_00_1b.0.analog-stereo.monitor
        pactl load-module module-loopback sink=MicAndPC source=alsa_input.usb-MICE_MICROPHONE_USB_MICROPHONE_201308-00.mono-fallback
    fi
    wf-recorder -o HDMI-A-1 --audio=MicAndPC.monitor -c h264_vaapi -C aac -d /dev/dri/renderD128 --file=$HOME/Videos/screencast_$(date +%Y%m%d-%H%M%S).mp4
}

mnt() {
    if [ $# -lt 1 ]; then
        echo "Usage: mnt <device> <mount_directory_name>"
        return 1
    fi

    DEVICE=$1
    MOUNT_DIR=$2

    if [ -z "$MOUNT_DIR" ]; then
        MOUNT_DIR=$(echo $RANDOM | md5sum | head -c 20)
    fi

    MOUNT_PATH="/run/media/$USER/$MOUNT_DIR"

    # Create the mount directory if it does not exist
    if [ ! -d "$MOUNT_PATH" ]; then
        sudo mkdir -p "$MOUNT_PATH"
    fi

    # Mount the device
    sudo mount "$DEVICE" "$MOUNT_PATH" -o uid=1000,gid=1000,dmask=0022,fmask=133

    # Check if the mount was successful
    if [ $? -eq 0 ]; then
        echo "Successfully mounted $DEVICE to $MOUNT_PATH"
        echo "Press enter to umount..."
    else
        echo "Failed to mount $DEVICE"
        return 1
    fi

    read && sudo umount "$MOUNT_PATH" && sudo rmdir "$MOUNT_PATH" && echo "Successfully umounted $DEVICE"
}

shopt -s checkwinsize
shopt -s expand_aliases
shopt -s histappend
